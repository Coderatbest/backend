name: CI portafolio

on:   
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - 'main'

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  SERVER: ${{ secrets.SERVER }}
  PORT: ${{ secrets.PORT }}
  USER: ${{ secrets.USER }}
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
  DEPLOY_DIR: ${{ secrets.DEPLOY_DIR }}

  IMAGE_NAME: backend

  WEBHOOK_ID: ${{ secrets.WEBHOOK_ID }}
  WEBHOOK_TOKEN: ${{ secrets.WEBHOOK_TOKEN }}

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run:  docker build backend/ --file backend/dockerfile.prod --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.ACCESS_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name:  Push image
        run: |
            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
            
            # Change all uppercase to lowercase
            IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
            
            # Strip git ref prefix from version
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            
            # Strip "v" prefix from tag name
            [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
            
            # Use Docker `latest` tag convention
            [ "$VERSION" == "main" ] && VERSION=latest
            echo IMAGE_ID=$IMAGE_ID
            echo VERSION=$VERSION
            docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
            docker push $IMAGE_ID:$VERSION
      - name: deploy
        run: |
            mkdir ~/.ssh
            echo "Host *">> ~/.ssh/config
            echo "StrictHostKeyChecking no">> ~/.ssh/config
            echo -e "    Host server\n    HostName $SERVER\n    User $USER">> ~/.ssh/config
            echo -e "    IdentityFile ~/.ssh/PRIVATE_KEY">> ~/.ssh/config
            cat ~/.ssh/config
            echo -e "docker-compose pull\ndocker-compose uo -d" > deploy.sh
            cat  deploy.sh
            echo -e $PRIVATE_KEY > ~/.ssh/PRIVATE_KEY
            chmod 700 ~/.ssh/PRIVATE_KEY

            scp -P $PORT docker-compose.depoy.yml $USER@$SERVER:$DEPLOY_DIR
            scp -P $PORT default.conf server:$DEPLOY_DIR
            ssh $USER@$SERVER < deploy.sh